---
description: 
globs: 
alwaysApply: true
---
# Next.js 15 Server Actions - Règles Principales

## Déclaration des Server Actions

### Directive 'use server'
- Toujours utiliser la directive `'use server'` en début de fichier ou de fonction
- Préférer la directive au niveau fichier pour les fichiers dédiés aux actions
- Utiliser TypeScript avec des types stricts

```typescript
'use server'

import { z } from 'zod'
import { revalidatePath } from 'next/cache'

// Définir les schémas de validation
const CreatePostSchema = z.object({
  title: z.string().min(1, 'Le titre est requis'),
  content: z.string().min(10, 'Le contenu doit faire au moins 10 caractères'),
})

export async function createPost(formData: FormData) {
  // Implementation
}
```

### Validation des données
- Toujours valider les données d'entrée avec Zod ou un autre validateur
- Définir les schémas en dehors des fonctions pour la réutilisabilité
- Gérer les erreurs de validation de manière cohérente

```typescript
export async function updateUser(formData: FormData) {
  const validatedFields = UpdateUserSchema.safeParse({
    name: formData.get('name'),
    email: formData.get('email'),
  })

  if (!validatedFields.success) {
    return {
      errors: validatedFields.error.flatten().fieldErrors,
    }
  }

  // Continuer avec les données validées
  const { name, email } = validatedFields.data
}
```

### Gestion des erreurs
- Utiliser un format de retour cohérent pour les erreurs
- Retourner des objets avec `success`, `error`, `data` quand approprié
- Logger les erreurs côté serveur sans exposer les détails sensibles

```typescript
export async function deletePost(id: string) {
  try {
    // Vérifications d'autorisation
    // Logique de suppression
    
    revalidatePath('/posts')
    return { success: true, message: 'Post supprimé avec succès' }
  } catch (error) {
    console.error('Erreur lors de la suppression:', error)
    return { 
      success: false, 
      error: 'Une erreur est survenue lors de la suppression' 
    }
  }
}
```

### Types TypeScript
- Définir des types de retour explicites
- Utiliser des interfaces pour les paramètres complexes
- Exporter les types pour la réutilisation côté client

```typescript
export interface ActionResult<T = any> {
  success: boolean
  data?: T
  error?: string
  errors?: Record<string, string[]>
}

export async function createUser(data: CreateUserData): Promise<ActionResult<User>> {
  // Implementation
}
```
