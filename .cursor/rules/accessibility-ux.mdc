---
description:
globs:
alwaysApply: false
---
# Accessibilité et UX avec Shadcn/ui

## Principes d'accessibilité

### Contraste et lisibilité
Respecter les ratios de contraste WCAG 2.1 AA (4.5:1 minimum) grâce aux variables OKLCH :

```typescript
// ✅ BON - Utilisation des tokens avec bon contraste
<div className="bg-background text-foreground">
  <h1 className="text-primary">Titre accessible</h1>
  <p className="text-muted-foreground">Texte secondaire lisible</p>
  <Button className="bg-primary text-primary-foreground">
    Action avec bon contraste
  </Button>
</div>

// Vérification des contrastes en dark mode
<div className="bg-card text-card-foreground dark:bg-card dark:text-card-foreground">
  <Alert variant="destructive">
    <AlertCircle className="h-4 w-4" />
    <AlertTitle>Erreur</AlertTitle>
    <AlertDescription>Message d'erreur bien contrasté</AlertDescription>
  </Alert>
</div>
```

### Navigation au clavier
Assurer une navigation clavier complète et logique :

```typescript
// ✅ BON - Navigation clavier accessible
<nav className="flex gap-2" role="navigation" aria-label="Navigation principale">
  <Button
    variant="ghost"
    className="focus:ring-2 focus:ring-ring focus:ring-offset-2"
    tabIndex={0}
  >
    Accueil
  </Button>
  <Button
    variant="ghost"
    className="focus:ring-2 focus:ring-ring focus:ring-offset-2"
  >
    À propos
  </Button>
</nav>

// Dialog accessible au clavier
<Dialog>
  <DialogTrigger asChild>
    <Button>Ouvrir le dialog</Button>
  </DialogTrigger>
  <DialogContent className="focus:outline-none">
    <DialogHeader>
      <DialogTitle>Titre du dialog</DialogTitle>
      <DialogDescription>
        Description accessible pour les lecteurs d'écran
      </DialogDescription>
    </DialogHeader>
    <div className="space-y-4">
      <Input placeholder="Champ accessible" />
      <div className="flex justify-end gap-2">
        <DialogClose asChild>
          <Button variant="outline">Annuler</Button>
        </DialogClose>
        <Button>Confirmer</Button>
      </div>
    </div>
  </DialogContent>
</Dialog>
```

### Attributs ARIA et sémantique
Utiliser les attributs ARIA appropriés :

```typescript
// ✅ BON - Formulaire accessible
<form role="form" aria-labelledby="form-title">
  <h2 id="form-title" className="text-2xl font-bold mb-4">
    Inscription
  </h2>
  
  <div className="space-y-4">
    <div>
      <Label htmlFor="email" className="required">
        Adresse e-mail
      </Label>
      <Input
        id="email"
        type="email"
        required
        aria-describedby="email-error"
        aria-invalid={hasEmailError}
        className={cn(hasEmailError && "border-destructive")}
      />
      {hasEmailError && (
        <p id="email-error" className="text-sm text-destructive mt-1" role="alert">
          Veuillez saisir une adresse e-mail valide
        </p>
      )}
    </div>
    
    <Button type="submit" disabled={isLoading} aria-describedby="submit-status">
      {isLoading ? (
        <>
          <Loader2 className="mr-2 h-4 w-4 animate-spin" aria-hidden="true" />
          Création en cours...
        </>
      ) : (
        'Créer le compte'
      )}
    </Button>
    
    {isLoading && (
      <p id="submit-status" className="sr-only" aria-live="polite">
        Création du compte en cours, veuillez patienter
      </p>
    )}
  </div>
</form>

// Table accessible
<Table role="table" aria-label="Liste des utilisateurs">
  <TableHeader>
    <TableRow role="row">
      <TableHead role="columnheader" scope="col">Nom</TableHead>
      <TableHead role="columnheader" scope="col">Email</TableHead>
      <TableHead role="columnheader" scope="col">Actions</TableHead>
    </TableRow>
  </TableHeader>
  <TableBody>
    {users.map((user) => (
      <TableRow key={user.id} role="row">
        <TableCell role="cell">{user.name}</TableCell>
        <TableCell role="cell">{user.email}</TableCell>
        <TableCell role="cell">
          <Button
            size="sm"
            variant="outline"
            aria-label={`Modifier ${user.name}`}
          >
            Modifier
          </Button>
        </TableCell>
      </TableRow>
    ))}
  </TableBody>
</Table>
```

## UX et feedback utilisateur

### États de chargement
Fournir un feedback visuel pour toutes les actions :

```typescript
// ✅ BON - États de chargement clairs
export function LoadingButton({
  isLoading,
  children,
  loadingText = "Chargement...",
  ...props
}: {
  isLoading?: boolean
  children: React.ReactNode
  loadingText?: string
} & React.ComponentProps<typeof Button>) {
  return (
    <Button disabled={isLoading} {...props}>
      {isLoading && (
        <Loader2 className="mr-2 h-4 w-4 animate-spin" aria-hidden="true" />
      )}
      {isLoading ? loadingText : children}
    </Button>
  )
}

// État de chargement pour les listes
export function LoadingList({ count = 3 }: { count?: number }) {
  return (
    <div className="space-y-3">
      {Array.from({ length: count }).map((_, i) => (
        <Card key={i} className="p-4">
          <div className="space-y-2">
            <Skeleton className="h-4 w-3/4" />
            <Skeleton className="h-4 w-1/2" />
          </div>
        </Card>
      ))}
    </div>
  )
}

// État vide avec action
export function EmptyState({
  title,
  description,
  action
}: {
  title: string
  description: string
  action?: React.ReactNode
}) {
  return (
    <div className="text-center py-12">
      <div className="space-y-4">
        <div className="space-y-2">
          <h3 className="text-lg font-medium">{title}</h3>
          <p className="text-muted-foreground">{description}</p>
        </div>
        {action && <div>{action}</div>}
      </div>
    </div>
  )
}
```

### Messages d'erreur et de succès
Utiliser des messages clairs et actionnables :

```typescript
// ✅ BON - Messages d'erreur constructifs
export function ErrorAlert({
  title = "Une erreur est survenue",
  message,
  retry
}: {
  title?: string
  message: string
  retry?: () => void
}) {
  return (
    <Alert variant="destructive">
      <AlertCircle className="h-4 w-4" />
      <AlertTitle>{title}</AlertTitle>
      <AlertDescription className="space-y-2">
        <p>{message}</p>
        {retry && (
          <Button
            variant="outline"
            size="sm"
            onClick={retry}
            className="mt-2"
          >
            <RefreshCw className="mr-2 h-4 w-4" />
            Réessayer
          </Button>
        )}
      </AlertDescription>
    </Alert>
  )
}

// Messages de succès temporaires
export function SuccessToast({ message }: { message: string }) {
  return (
    <Alert className="border-green-200 bg-green-50 text-green-800">
      <CheckCircle2 className="h-4 w-4" />
      <AlertDescription>{message}</AlertDescription>
    </Alert>
  )
}

// Validation de formulaire en temps réel
export function FormFieldWithValidation({
  label,
  error,
  success,
  children,
  ...props
}: {
  label: string
  error?: string
  success?: string
  children: React.ReactNode
}) {
  return (
    <div className="space-y-2">
      <Label {...props}>{label}</Label>
      {children}
      {error && (
        <p className="text-sm text-destructive flex items-center gap-1">
          <AlertCircle className="h-3 w-3" />
          {error}
        </p>
      )}
      {success && (
        <p className="text-sm text-green-600 flex items-center gap-1">
          <CheckCircle2 className="h-3 w-3" />
          {success}
        </p>
      )}
    </div>
  )
}
```

### Interactions fluides
Créer des transitions et interactions naturelles :

```typescript
// ✅ BON - Animations et transitions fluides
export function AnimatedCard({
  children,
  onClick,
  ...props
}: {
  children: React.ReactNode
  onClick?: () => void
} & React.ComponentProps<typeof Card>) {
  return (
    <Card
      className={cn(
        "transition-all duration-200 cursor-pointer",
        "hover:shadow-md hover:-translate-y-1",
        "active:scale-[0.98]",
        onClick && "hover:bg-accent/50"
      )}
      onClick={onClick}
      {...props}
    >
      {children}
    </Card>
  )
}

// Navigation avec indicateur de page active
export function Navigation({ currentPath }: { currentPath: string }) {
  const navItems = [
    { href: "/dashboard", label: "Tableau de bord" },
    { href: "/projects", label: "Projets" },
    { href: "/settings", label: "Paramètres" }
  ]

  return (
    <nav className="flex space-x-1">
      {navItems.map((item) => {
        const isActive = currentPath === item.href
        return (
          <Button
            key={item.href}
            variant={isActive ? "default" : "ghost"}
            size="sm"
            className={cn(
              "transition-all duration-200",
              isActive && "shadow-sm"
            )}
            aria-current={isActive ? "page" : undefined}
          >
            {item.label}
          </Button>
        )
      })}
    </nav>
  )
}

// Drag and drop visual feedback
export function DraggableItem({ 
  children,
  isDragging,
  isOver 
}: {
  children: React.ReactNode
  isDragging?: boolean
  isOver?: boolean
}) {
  return (
    <div
      className={cn(
        "p-4 border rounded-lg transition-all duration-200",
        isDragging && "opacity-50 rotate-1 scale-105",
        isOver && "border-primary bg-primary/5",
        "hover:shadow-sm"
      )}
    >
      {children}
    </div>
  )
}
```

## Responsive UX

### Navigation mobile
Adapter l'interface pour les appareils mobiles :

```typescript
// ✅ BON - Navigation mobile avec drawer
export function MobileNavigation() {
  const [isOpen, setIsOpen] = useState(false)

  return (
    <>
      <Button
        variant="ghost"
        size="icon"
        className="md:hidden"
        onClick={() => setIsOpen(true)}
        aria-label="Ouvrir le menu"
      >
        <Menu className="h-5 w-5" />
      </Button>

      <Sheet open={isOpen} onOpenChange={setIsOpen}>
        <SheetContent side="left" className="w-80">
          <SheetHeader>
            <SheetTitle>Navigation</SheetTitle>
          </SheetHeader>
          <nav className="mt-6">
            <div className="space-y-2">
              {navItems.map((item) => (
                <Button
                  key={item.href}
                  variant="ghost"
                  className="w-full justify-start"
                  onClick={() => setIsOpen(false)}
                >
                  <item.icon className="mr-2 h-4 w-4" />
                  {item.label}
                </Button>
              ))}
            </div>
          </nav>
        </SheetContent>
      </Sheet>
    </>
  )
}

// Formulaires adaptatifs mobile
export function ResponsiveForm({ children }: { children: React.ReactNode }) {
  return (
    <form className="space-y-4 sm:space-y-6">
      <div className="grid gap-4 sm:gap-6 grid-cols-1 sm:grid-cols-2">
        {children}
      </div>
      <div className="flex flex-col sm:flex-row gap-3 sm:gap-4">
        <Button type="submit" className="w-full sm:w-auto">
          Enregistrer
        </Button>
        <Button type="button" variant="outline" className="w-full sm:w-auto">
          Annuler
        </Button>
      </div>
    </form>
  )
}
```

### Gestion des tailles d'écran
Optimiser l'affichage pour toutes les tailles :

```typescript
// ✅ BON - Composants adaptatifs
export function ResponsiveDialog({
  children,
  ...props
}: React.ComponentProps<typeof Dialog>) {
  const isMobile = useIsMobile()

  if (isMobile) {
    return (
      <Drawer {...props}>
        <DrawerContent className="p-4">
          {children}
        </DrawerContent>
      </Drawer>
    )
  }

  return (
    <Dialog {...props}>
      <DialogContent className="max-w-md">
        {children}
      </DialogContent>
    </Dialog>
  )
}

// Table responsive avec scroll horizontal
export function ResponsiveTable({ data }: { data: any[] }) {
  return (
    <div className="w-full">
      <div className="overflow-x-auto">
        <Table className="min-w-[600px]">
          <TableHeader>
            <TableRow>
              <TableHead className="w-[100px]">ID</TableHead>
              <TableHead>Nom</TableHead>
              <TableHead className="hidden sm:table-cell">Email</TableHead>
              <TableHead className="hidden md:table-cell">Date</TableHead>
              <TableHead className="text-right">Actions</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {data.map((item) => (
              <TableRow key={item.id}>
                <TableCell className="font-medium">{item.id}</TableCell>
                <TableCell>
                  <div>
                    <div className="font-medium">{item.name}</div>
                    <div className="text-sm text-muted-foreground sm:hidden">
                      {item.email}
                    </div>
                  </div>
                </TableCell>
                <TableCell className="hidden sm:table-cell">
                  {item.email}
                </TableCell>
                <TableCell className="hidden md:table-cell">
                  {item.date}
                </TableCell>
                <TableCell className="text-right">
                  <DropdownMenu>
                    <DropdownMenuTrigger asChild>
                      <Button variant="ghost" size="icon">
                        <MoreVertical className="h-4 w-4" />
                      </Button>
                    </DropdownMenuTrigger>
                    <DropdownMenuContent>
                      <DropdownMenuItem>Modifier</DropdownMenuItem>
                      <DropdownMenuItem>Supprimer</DropdownMenuItem>
                    </DropdownMenuContent>
                  </DropdownMenu>
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </div>
    </div>
  )
}
```
